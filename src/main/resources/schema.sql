CREATE TABLE USERS (
  USER_ID INT IDENTITY PRIMARY KEY,
  USERNAME VARCHAR(250) NOT NULL,
  PASSWORD VARCHAR(250) NOT NULL,
  FIRST_NAME VARCHAR(250) NOT NULL,
  LAST_NAME VARCHAR(250) NOT NULL,
  EMAIL VARCHAR(250) NOT NULL,
  UNIQUE KEY EMAIL_UNIQUE (EMAIL),
  UNIQUE KEY USERNAME_UNIQUE (USERNAME)
);

CREATE TABLE ROLES (
  ROLE_ID INT IDENTITY PRIMARY KEY,
  NAME varchar(45) NOT NULL
);

INSERT INTO ROLES (ROLE_ID, NAME) VALUES (1, 'MEMBER');
INSERT INTO ROLES (ROLE_ID, NAME) VALUES (2, 'LIBRARIAN');

CREATE TABLE USERS_ROLE (
  USER_ID int NOT NULL,
  ROLE_ID int NOT NULL,
  KEY `USER_FK_IDX` (USER_ID),
  KEY `ROLE_FK_IDX` (ROLE_ID),
  CONSTRAINT `role_fk` FOREIGN KEY (ROLE_ID) REFERENCES ROLES (ROLE_ID),
  CONSTRAINT `user_fk` FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)
);

DROP TABLE IF EXISTS BOOK;

CREATE TABLE BOOK (
  BOOK_ID INT IDENTITY PRIMARY KEY,
  TITLE VARCHAR(250) NOT NULL,
  AUTHOR VARCHAR(250) NOT NULL,
  ISBN VARCHAR(250) UNIQUE NOT NULL,
  STATUS VARCHAR(50) NOT NULL,
  CREATED_DATE DATE,
  UPDATED_DATE DATE
);

DROP TABLE IF EXISTS BOOK_RECORD;

CREATE TABLE BOOK_RECORD (
  ID INT IDENTITY PRIMARY KEY,
  USER_ID INT,
  BOOK_ID INT,
  foreign key (USER_ID) references USERS(USER_ID),
  foreign key (BOOK_ID) references BOOK(BOOK_ID)
);

-- DROP TABLE IF EXISTS LIBRARIAN;
--
-- CREATE TABLE LIBRARIAN (
--   LIB_ID INT IDENTITY  PRIMARY KEY,
--   FIRST_NAME VARCHAR(250) NOT NULL,
--   LAST_NAME VARCHAR(250) NOT NULL,
--   EMAIL VARCHAR(250) DEFAULT NULL
-- );
--
-- INSERT INTO LIBRARIAN (FIRST_NAME, LAST_NAME, EMAIL) VALUES ('admin', 'admin', 'admin@gmail.com');
--
-- DROP TABLE IF EXISTS MEMBER;
--
-- CREATE TABLE MEMBER (
--   MEMBER_ID INT IDENTITY PRIMARY KEY,
--   FIRST_NAME VARCHAR(250) NOT NULL,
--   LAST_NAME VARCHAR(250) NOT NULL,
--   EMAIL VARCHAR(250) DEFAULT NULL
-- );