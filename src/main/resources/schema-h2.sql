DROP TABLE IF EXISTS LIBRARIAN;

CREATE TABLE USERS (
  USER_ID INT IDENTITY PRIMARY KEY,
  USERNAME VARCHAR(250) UNIQUE NOT NULL,
  FIRST_NAME VARCHAR(250) NOT NULL,
  LAST_NAME VARCHAR(250) NOT NULL,
  EMAIL VARCHAR(250) UNIQUE NOT NULL
);

CREATE TABLE ROLES (
  ROLE_ID INT NOT NULL IDENTITY,
  NAME varchar(45) NOT NULL,
  PRIMARY KEY (ROLE_ID)
);

CREATE TABLE USERS_ROLE (
  USER_ID int NOT NULL,
  ROLE_ID int NOT NULL,
  KEY `USER_FK_IDX` (USER_ID),
  KEY `ROLE_FK_IDX` (ROLE_ID),
  CONSTRAINT `role_fk` FOREIGN KEY (ROLE_ID) REFERENCES ROLES (ROLE_ID),
  CONSTRAINT `user_fk` FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)
);


CREATE TABLE LIBRARIAN (
  LIB_ID INT IDENTITY  PRIMARY KEY,
  FIRST_NAME VARCHAR(250) NOT NULL,
  LAST_NAME VARCHAR(250) NOT NULL,
  EMAIL VARCHAR(250) DEFAULT NULL
);

INSERT INTO LIBRARIAN (FIRST_NAME, LAST_NAME, EMAIL) VALUES ('admin', 'admin', 'admin@gmail.com');

DROP TABLE IF EXISTS MEMBER;

CREATE TABLE MEMBER (
  MEMBER_ID INT IDENTITY PRIMARY KEY,
  FIRST_NAME VARCHAR(250) NOT NULL,
  LAST_NAME VARCHAR(250) NOT NULL,
  EMAIL VARCHAR(250) DEFAULT NULL
);

DROP TABLE IF EXISTS BOOK;

CREATE TABLE BOOK (
  BOOK_ID INT IDENTITY PRIMARY KEY,
  TITLE VARCHAR(250) NOT NULL,
  AUTHOR VARCHAR(250) NOT NULL,
  ISBN VARCHAR(250) UNIQUE NOT NULL,
  STATUS VARCHAR(50) NOT NULL,
  CREATED_DATE DATE,
  UPDATED_DATE DATE
);

DROP TABLE IF EXISTS BOOK_RECORD;

CREATE TABLE BOOK_RECORD (
  ID INT IDENTITY PRIMARY KEY,
  MEMBER_ID INT,
  BOOK_ID INT,
  foreign key (MEMBER_ID) references MEMBER(MEMBER_ID),
  foreign key (BOOK_ID) references BOOK(BOOK_ID)
);